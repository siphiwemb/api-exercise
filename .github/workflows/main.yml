# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1
      # Login to AWS ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      # Build, tag and push image to ECR
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: titanic-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./titanicapi

      - name: Scan image for vulnerabilities  
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: titanic-repo
          IMAGE_TAG: ${{ github.sha }}
        uses: aquasecurity/trivy-action@0.0.7
        with:
           image-ref: 477692995944.dkr.ecr.af-south-1.amazonaws.com/titanic-repo:latest
           serverity: HIGH,CRITICAL

      - name: Push image    
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: titanic-repo
          IMAGE_TAG: ${{ github.sha }}   
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Deploy to cluster
      - name: Deploy to cluster
        uses: medyagh/setup-minikube@master
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: titanic-repo
          IMAGE_TAG: ${{ github.sha }}
        with:
          args: set image -n titanic-ns deployment/titanicapi titanicapi=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      # Verify deployment
      - name: Try the cluster !
        run: |
          kubectl get pods -A
          kubectl apply -f ./titanicapi/manifests/api-namespace.yml
          kubectl apply -f ./titanicapi/manifests/api-service.yml
          kubectl apply -f ./titanicapi/manifests/api-ingress.yml
      - name: Deploy to minikube
        run: |
          kubectl apply -f ./titanicapi/manifests/api-deployment.yml
      - name: Test service URLs
        run: |
          minikube service list
      

